Microsoft (R) Macro Assembler Version 14.00.23506.0	    12/11/16 14:55:57
Snake   (Snake.asm					     Page 1 - 1


				TITLE   Snake   (Snake.asm)
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Last update: 12/8/16

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				; This program: 
				;Simulates the game of Snake. 
				;The snake will move via user input as well as it shall eat and grow according to food eaten.
				; Then the game will end if the snake collides with a wall, or if the snake collides with itself.
				;Also the next level will start if the snake finishes all of its food. 
				;Lastly the user may end the game by pressing the escape key.
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				; 218 is the character I want for the snake 


 00000000			.data

				;;;;;;;;;;;;;;;;;;;;;;;
				; These are strings to be printed to the console

 00000000 20 47 61 6D 65	GameoverST BYTE " Game Over! ",0
	   20 4F 76 65 72
	   21 20 00
 0000000D 20 59 6F 75 72	ScoreDispST BYTE " Your Score Is: ",0
	   20 53 63 6F 72
	   65 20 49 73 3A
	   20 00

				;;;;;;;;;;;;;;;;;;;;;;; These are the Snake elements
 0000001E 00			x_head BYTE ?         ; X coordinate of the head of the snake
 0000001F 00			y_head BYTE ?         ; Y coordinate of the head of the snake
 00000020 02			head BYTE 2H          ; Character for the head of the snake
 00000021 23			part BYTE "#"      ; Character for snake segments

 00000022 00			x_food BYTE ?         ; X coordinate for the food
 00000023 00			y_food BYTE ?         ; Y coordinate for the food
 00000024 00			foodeaten BYTE 0      ; Amount of food eaten
 00000025 61			Food BYTE "a"         ; Character for the food

 00000026 00			x_tail BYTE ?         ; Holds the x coordinate for the tail of the snake
 00000027 00			y_tail BYTE ?         ; Holds the y coordinate for the tail of the snake

 00000028			Segments_X BYTE 800 DUP(0)  ; Array for the X coordinate of the segments
 00000348			Segments_Y BYTE 800 DUP(0)  ; Array for the Y coordinate of the segments

 00000668 00000000		NumOfSegments DWORD 0

 0000066C 00000000		score DWORD 0
 00000670 005A			speed WORD 90         ; Holds the speed of the game

 00000672 00			direction BYTE 0      ; Holds Direction
 00000673 00			oldDirect BYTE 0      ; Holds the old direction



 00000000			.code
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000000			main PROC
 00000000  E8 00000000 E	call Clrscr

				;call Snake

				;call Food


					exit
 00000005  6A 00	   *	    push   +000000000h
 00000007  E8 00000000 E   *	    call   ExitProcess
 0000000C			main ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000000C			SnakeMovement PROC USES eax edx
				; This procedure will take user input and interpret it 
				; Into snake movement

 0000000C  50		   *	    push   eax
 0000000D  52		   *	    push   edx
 0000000E  88 25 00000672 R	mov direction, ah
 00000014  E8 0000038D		call GameSpeed
 00000019  66| A1		mov ax, speed
	   00000670 R
 0000001F  0F B7 C0		movzx eax, ax           ; This delays motion
 00000022  E8 00000000 E	call Delay
 00000027  B2 00		mov dl, 0
 00000029  B6 09		mov dh, 9
 0000002B  E8 00000000 E	call Gotoxy
 00000030  66| A1		mov ax, speed
	   00000670 R
 00000036  0F B7 C0		movzx eax, ax
 00000039  E8 00000000 E	call WriteInt          ; This is the speed of the game

 0000003E  8A 15 0000001E R	mov dl, x_head
 00000044  8A 35 0000001F R	mov dh, y_head
 0000004A  E8 00000000 E	call Gotoxy

 0000004F  B0 20		mov al, ' '
 00000051  E8 00000000 E	call WriteChar
 00000056  E8 0000014A		call FoodEat
 0000005B  8A 25 00000672 R	mov ah, direction     ; This passes the new direction to ah
 00000061  A0 00000673 R	mov al, oldDirect     ; This passes the old direction to al

 00000066  80 FA 40		cmp dl, 64
 00000069  0F 8D 000000E4	jge GameOver

 0000006F  80 FA 0E		cmp dl, 14
 00000072  0F 8E 000000DB	jle GameOver

 00000078  80 FE 15		cmp dh, 21
 0000007B  0F 8D 000000D2	jge GameOver

 00000081  80 FE 04		cmp dh, 4
 00000084  0F 8E 000000C9	jle GameOver

 0000008A  80 FC 48		cmp ah, 48H
 0000008D  74 28		je Up

 0000008F  80 FC 50		cmp ah, 50H
 00000092  74 32		je Down

 00000094  80 FC 4D		cmp ah, 4DH
 00000097  74 3C		je Right

 00000099  80 FC 4B		cmp ah, 4BH
 0000009C  74 46		je Left

 0000009E  80 FC 49		cmp ah, 49H
 000000A1  74 50		je UpRight

 000000A3  80 FC 47		cmp ah, 47H
 000000A6  74 5C		je UpLeft

 000000A8  80 FC 51		cmp ah, 51H
 000000AB  74 68		je DownRight

 000000AD  80 FC 4F		cmp ah, 4FH
 000000B0  74 74		je DownLeft

 000000B2  E9 00000099		jmp Finish


 000000B7			Up:
 000000B7  C6 05 00000673 R	mov oldDirect, 48H
	   48
 000000BE  3C 50		cmp al, 50H
 000000C0  74 04		je Down
 000000C2  FE CE		dec dh
 000000C4  EB 6F		jmp UpdateHead

 000000C6			Down:
 000000C6  C6 05 00000673 R	mov oldDirect, 50H
	   50
 000000CD  3C 48		cmp al, 48H
 000000CF  74 E6		je Up
 000000D1  FE C6		inc dh
 000000D3  EB 60		jmp UpdateHead

 000000D5			Right:
 000000D5  C6 05 00000673 R	mov oldDirect, 4DH
	   4D
 000000DC  3C 4B		cmp al, 4BH
 000000DE  74 04		je Left
 000000E0  FE C2		inc dl
 000000E2  EB 51		jmp UpdateHead

 000000E4			Left:
 000000E4  C6 05 00000673 R	mov oldDirect, 4BH
	   4B
 000000EB  3C 4D		cmp al, 4DH
 000000ED  74 E6		je Right
 000000EF  FE CA		dec dl
 000000F1  EB 42		jmp UpdateHead

 000000F3			UpRight:
 000000F3  C6 05 00000673 R	mov oldDirect, 49H
	   49
 000000FA  3C 04		cmp al, 4H
 000000FC  74 28		je DownLeft
 000000FE  FE CE		dec dh
 00000100  FE C2		inc dl
 00000102  EB 31		jmp UpdateHead

 00000104			UpLeft:
 00000104  C6 05 00000673 R	mov oldDirect, 47H
	   47
 0000010B  3C 51		cmp al, 51H
 0000010D  74 06		je DownRight
 0000010F  FE CE		dec dh
 00000111  FE CA		dec dl
 00000113  EB 20		jmp UpdateHead

 00000115			DownRight:
 00000115  C6 05 00000673 R	mov oldDirect, 51H
	   51
 0000011C  3C 47		cmp al, 47H
 0000011E  74 E4		je UpLeft
 00000120  FE C6		inc dh
 00000122  FE C2		inc dl
 00000124  EB 0F		jmp UpdateHead

 00000126			DownLeft:
 00000126  C6 05 00000673 R	mov oldDirect, 4FH
	   4F
 0000012D  3C 49		cmp al, 49H
 0000012F  74 C2		je UpRight
 00000131  FE C6		inc dh
 00000133  FE CA		dec dl

 00000135			UpdateHead:
 00000135  88 15 0000001E R	mov x_head, dl
 0000013B  88 35 0000001F R	mov y_head, dh
 00000141  E8 00000000 E	call Gotoxy
 00000146  A0 00000020 R	mov al, head
 0000014B  E8 00000000 E	call WriteChar

 00000150			Finish:

				ret
 00000150  5A		   *	    pop    edx
 00000151  58		   *	    pop    eax
 00000152  C3		   *	    ret    00000h

 00000153			GameOver:
 00000153  8A 15 0000001E R	mov dl, x_head
 00000159  8A 35 0000001F R	mov dh, y_head
 0000015F  E8 00000000 E	call Gotoxy
 00000164  A0 00000020 R	mov al, head
 00000169  E8 00000000 E	call WriteChar
 0000016E  B8 000003E8		mov eax, 1000
 00000173  E8 00000000 E	call Delay
 00000178  B2 21		mov dl, 33
 0000017A  B6 0D		mov dh, 13
 0000017C  E8 00000000 E	call Gotoxy
 00000181  B8 000000F4		mov eax, red+(white*16)
 00000186  E8 00000000 E	call SetTextColor
 0000018B  BA 00000000 R	mov edx, OFFSET GameoverST
 00000190  E8 00000000 E	call WriteString
 00000195  B2 14		mov dl, 20
 00000197  B6 18		mov dh, 24
 00000199  E8 00000000 E	call Gotoxy
				exit
 0000019E  6A 00	   *	    push   +000000000h
 000001A0  E8 00000000 E   *	    call   ExitProcess
 000001A5			SnakeMovement ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000001A5			FoodEat PROC USES eax edx
				; This procedure will randomize and display the food for the snake

 000001A5  50		   *	    push   eax
 000001A6  52		   *	    push   edx
 000001A7			NewFood:
 000001A7  A0 00000024 R	mov al, foodeaten
 000001AC  3C 00		cmp al, 0
 000001AE  75 42		jne NotEaten

 000001B0			RandomX:
 000001B0  C6 05 00000024 R	mov foodeaten, 1
	   01
 000001B7  B8 00000040		mov eax, 64
 000001BC  E8 00000000 E	call RandomRange
 000001C1  3C 0F		cmp al, 15
 000001C3  7C EB		jl RandomX
 000001C5  A2 00000022 R	mov x_food, al
 000001CA  8A D0		mov dl, al

 000001CC			RandomY:
 000001CC  B8 00000012		mov eax, 18
 000001D1  E8 00000000 E	call RandomRange
 000001D6  3C 05		cmp al, 5
 000001D8  7C F2		jl RandomY
 000001DA  A2 00000023 R	mov y_food, al
 000001DF  8A F0		mov dh, al
 000001E1  E8 00000000 E	call Gotoxy
 000001E6  A0 00000025 R	mov al, food
 000001EB  E8 00000000 E	call WriteChar
 000001F0  8A C2		mov al, dl

 000001F2			NotEaten:
 000001F2  A0 0000001E R	mov al, x_head
 000001F7  8A 25 0000001F R	mov ah, y_head
 000001FD  8A 15 00000022 R	mov dl, x_food
 00000203  8A 35 00000023 R	mov dh, y_food
 00000209  66| 3B C2		cmp ax, dx
 0000020C  75 3B		jne Finish
 0000020E  A1 00000668 R	mov eax, NumOfSegments
 00000213  40			inc eax
 00000214  A3 00000668 R	mov NumOfSegments, eax
 00000219  C6 05 00000024 R	mov foodeaten, 0
	   00
 00000220  E8 0000010E		call PrintSegments
 00000225  E8 0000016E		call ScoreDisp
 0000022A  B2 1E		mov dl, 30
 0000022C  B6 17		mov dh, 23
 0000022E  E8 00000000 E	call Gotoxy
 00000233  BA 0000000D R	mov edx, OFFSET ScoreDispST
 00000238  E8 00000000 E	call WriteString
 0000023D  A1 0000066C R	mov eax, score
 00000242  E8 00000000 E	call WriteInt
 00000247  EB 00		jmp Finish
 00000249			Finish:

				ret
 00000249  5A		   *	    pop    edx
 0000024A  58		   *	    pop    eax
 0000024B  C3		   *	    ret    00000h
 0000024C			FoodEat ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000024C			Snake PROC USES eax ebx ecx esi
				; This procedure will genereate a Snake 
 0000024C  50		   *	    push   eax
 0000024D  53		   *	    push   ebx
 0000024E  51		   *	    push   ecx
 0000024F  56		   *	    push   esi
 00000250  8B 1D 00000668 R	mov ebx, NumOfSegments
 00000256  83 FB 01		cmp ebx, 1
 00000259  7D 1E		jge Continue
 0000025B  BE 00000028 R	mov esi, OFFSET Segments_X
 00000260  A0 0000001E R	mov al, x_head
 00000265  88 06		mov [esi], al
 00000267  8A 06		mov al, [esi]
 00000269  BE 00000348 R	mov esi, OFFSET Segments_Y
 0000026E  A0 0000001F R	mov al, y_head
 00000273  88 06		mov [esi], al
 00000275  8A 06		mov al,[esi]
 00000277  EB 51		jmp Finish

 00000279			Continue:
 00000279  A0 00000024 R	mov al, foodeaten
 0000027E  0F B6 C0		movzx eax, al
 00000281  3C 00		cmp al, 0
 00000283  75 3B		jne NotEaten

 00000285			Eaten:
 00000285  8B 0D 00000668 R	mov ecx, NumOfSegments
 0000028B  41			inc ecx

 0000028C			ShiftRight:
 0000028C  8B D9		mov ebx, ecx
 0000028E  BE 00000028 R	mov esi, OFFSET Segments_X
 00000293  8A 44 33 FF		mov al, [esi+ebx-1]
 00000297  88 04 33		mov [esi+ebx], al
 0000029A  BE 00000348 R	mov esi, OFFSET Segments_Y
 0000029F  8A 44 33 FF		mov al, [esi+ebx-1]
 000002A3  88 04 33		mov [esi+ebx], al

 000002A6  E2 E4		Loop ShiftRight

 000002A8  BE 00000028 R	mov esi, OFFSET Segments_X
 000002AD  A0 00000022 R	mov al, x_food
 000002B2  88 06		mov [esi], al
 000002B4  BE 00000348 R	mov esi, OFFSET Segments_Y
 000002B9  A0 00000023 R	mov al, y_food
 000002BE  88 06		mov [esi], al

 000002C0			NotEaten:

 000002C0  E8 0000000A		call SetGame
 000002C5  E8 00000069		call PrintSegments

 000002CA			Finish:

				ret
 000002CA  5E		   *	    pop    esi
 000002CB  59		   *	    pop    ecx
 000002CC  5B		   *	    pop    ebx
 000002CD  58		   *	    pop    eax
 000002CE  C3		   *	    ret    00000h
 000002CF			Snake ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000002CF			SetGame PROC

 000002CF  BE 00000028 R	mov esi, OFFSET Segments_X
 000002D4  8A 06		mov al, [esi]
 000002D6  A2 00000026 R	mov x_tail, al
 000002DB  BE 00000348 R	mov esi, OFFSET Segments_Y
 000002E0  8A 06		mov al, [esi]
 000002E2  A2 00000027 R	mov y_tail, al
 000002E7  BB 00000001		mov ebx, 1
 000002EC  8B 0D 00000668 R	mov ecx, NumOfSegments
 000002F2  41			inc ecx

 000002F3			ShiftLeft:
 000002F3  BE 00000028 R	mov esi, OFFSET Segments_X
 000002F8  8A 04 33		mov al, [esi+ebx]
 000002FB  88 44 33 FF		mov [esi+ebx-1],al
 000002FF  BE 00000348 R	mov esi, OFFSET Segments_Y
 00000304  8A 04 33		mov al, [esi+ebx]
 00000307  88 44 33 FF		mov [esi+ebx-1], al
 0000030B  8A 06		mov al, [esi]
 0000030D  43			inc ebx

 0000030E  E2 E3		Loop ShiftLeft

 00000310  8B 1D 00000668 R	mov ebx, NumOfSegments
 00000316  BE 00000028 R	mov esi, OFFSET Segments_X
 0000031B  A0 0000001E R	mov al, x_head
 00000320  88 04 33		mov[esi+ebx], al
 00000323  8A 06		mov al, [esi]
 00000325  BE 00000348 R	mov esi, OFFSET Segments_Y
 0000032A  A0 0000001F R	mov al, y_head
 0000032F  88 04 33		mov [esi+ebx], al

 00000332  C3			ret
 00000333			SetGame ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000333			PrintSegments PROC USES eax ebx ecx edx esi

 00000333  50		   *	    push   eax
 00000334  53		   *	    push   ebx
 00000335  51		   *	    push   ecx
 00000336  52		   *	    push   edx
 00000337  56		   *	    push   esi
 00000338  8A 15 00000026 R	mov dl, x_tail
 0000033E  8A 35 00000027 R	mov dh, y_tail

 00000344  E8 00000000 E	call Gotoxy

 00000349  B0 20		mov al, ' '

 0000034B  E8 00000000 E	call WriteChar
 00000350  8B 0D 00000668 R	mov ecx, NumOfSegments
 00000356  41			inc ecx

 00000357			Print:
 00000357  8B D9		mov ebx, ecx
 00000359  BE 00000028 R	mov esi, OFFSET Segments_X
 0000035E  8A 44 33 FF		mov al, [esi+ebx-1]
 00000362  8A D0		mov dl, al
 00000364  BE 00000348 R	mov esi, OFFSET Segments_Y
 00000369  8A 44 33 FF		mov al, [esi+ebx-1]
 0000036D  8A F0		mov dh, al
 0000036F  E8 00000000 E	call Gotoxy
 00000374  8B 15 00000668 R	mov edx, NumOfSegments
 0000037A  42			inc edx
 0000037B  3B CA		cmp ecx, edx
 0000037D  75 07		jne PrintSeg
 0000037F  A0 00000020 R	mov al, head
 00000384  EB 05		jmp Printtail

 00000386			PrintSeg:
 00000386  A0 00000021 R	mov al, part

 0000038B			Printtail:
 0000038B  E8 00000000 E	call WriteChar

 00000390  E2 C5		Loop Print

				ret
 00000392  5E		   *	    pop    esi
 00000393  5A		   *	    pop    edx
 00000394  59		   *	    pop    ecx
 00000395  5B		   *	    pop    ebx
 00000396  58		   *	    pop    eax
 00000397  C3		   *	    ret    00000h
 00000398			PrintSegments ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000398			ScoreDisp PROC
				; This procedure will display the user's score

 00000398  A1 0000066C R	mov eax, score
 0000039D  83 C0 01		add eax, 1
 000003A0  A3 0000066C R	mov score, eax

 000003A5  C3			ret
 000003A6			ScoreDisp ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000003A6			GameSpeed PROC USES eax ebx edx

 000003A6  50		   *	    push   eax
 000003A7  53		   *	    push   ebx
 000003A8  52		   *	    push   edx
 000003A9  BA 00000000		mov edx, 0
 000003AE  A1 0000066C R	mov eax, score
 000003B3  BB 0000000A		mov ebx, 10
 000003B8  F7 F3		div ebx
 000003BA  83 FA 01		cmp edx, 1
 000003BD  75 20		jne Finish
 000003BF  66| A1		mov ax, speed
	   00000670 R
 000003C5  66| BB 000A		mov bx, 10
 000003C9  66| 2B C3		sub ax, bx
 000003CC  66| A3		mov speed, ax
	   00000670 R
 000003D2  A1 0000066C R	mov eax, score
 000003D7  83 C0 01		add eax, 1
 000003DA  A3 0000066C R	mov score, eax

 000003DF			Finish:

				ret
 000003DF  5A		   *	    pop    edx
 000003E0  5B		   *	    pop    ebx
 000003E1  58		   *	    pop    eax
 000003E2  C3		   *	    ret    00000h
 000003E3			GameSpeed ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				exit
 000003E3  6A 00	   *	    push   +000000000h
 000003E5  E8 00000000 E   *	    call   ExitProcess
				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    12/11/16 14:55:57
Snake   (Snake.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000674 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003EA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FoodEat  . . . . . . . . . . . .	P Near	 000001A5 _TEXT	Length= 000000A7 Public STDCALL
  NewFood  . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  RandomX  . . . . . . . . . . .	L Near	 000001B0 _TEXT	
  RandomY  . . . . . . . . . . .	L Near	 000001CC _TEXT	
  NotEaten . . . . . . . . . . .	L Near	 000001F2 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000249 _TEXT	
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameSpeed  . . . . . . . . . . .	P Near	 000003A6 _TEXT	Length= 0000003D Public STDCALL
  Finish . . . . . . . . . . . .	L Near	 000003DF _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintSegments  . . . . . . . . .	P Near	 00000333 _TEXT	Length= 00000065 Public STDCALL
  Print  . . . . . . . . . . . .	L Near	 00000357 _TEXT	
  PrintSeg . . . . . . . . . . .	L Near	 00000386 _TEXT	
  Printtail  . . . . . . . . . .	L Near	 0000038B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScoreDisp  . . . . . . . . . . .	P Near	 00000398 _TEXT	Length= 0000000E Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetGame  . . . . . . . . . . . .	P Near	 000002CF _TEXT	Length= 00000064 Public STDCALL
  ShiftLeft  . . . . . . . . . .	L Near	 000002F3 _TEXT	
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SnakeMovement  . . . . . . . . .	P Near	 0000000C _TEXT	Length= 00000199 Public STDCALL
  Up . . . . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  Down . . . . . . . . . . . . .	L Near	 000000C6 _TEXT	
  Right  . . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  Left . . . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  UpRight  . . . . . . . . . . .	L Near	 000000F3 _TEXT	
  UpLeft . . . . . . . . . . . .	L Near	 00000104 _TEXT	
  DownRight  . . . . . . . . . .	L Near	 00000115 _TEXT	
  DownLeft . . . . . . . . . . .	L Near	 00000126 _TEXT	
  UpdateHead . . . . . . . . . .	L Near	 00000135 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000150 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 00000153 _TEXT	
Snake  . . . . . . . . . . . . .	P Near	 0000024C _TEXT	Length= 00000083 Public STDCALL
  Continue . . . . . . . . . . .	L Near	 00000279 _TEXT	
  Eaten  . . . . . . . . . . . .	L Near	 00000285 _TEXT	
  ShiftRight . . . . . . . . . .	L Near	 0000028C _TEXT	
  NotEaten . . . . . . . . . . .	L Near	 000002C0 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000002CA _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
Food . . . . . . . . . . . . . .	Byte	 00000025 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameoverST . . . . . . . . . . .	Byte	 00000000 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumOfSegments  . . . . . . . . .	DWord	 00000668 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScoreDispST  . . . . . . . . . .	Byte	 0000000D _DATA	
Segments_X . . . . . . . . . . .	Byte	 00000028 _DATA	
Segments_Y . . . . . . . . . . .	Byte	 00000348 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000672 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foodeaten  . . . . . . . . . . .	Byte	 00000024 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
head . . . . . . . . . . . . . .	Byte	 00000020 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
oldDirect  . . . . . . . . . . .	Byte	 00000673 _DATA	
part . . . . . . . . . . . . . .	Byte	 00000021 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 0000066C _DATA	
speed  . . . . . . . . . . . . .	Word	 00000670 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x_food . . . . . . . . . . . . .	Byte	 00000022 _DATA	
x_head . . . . . . . . . . . . .	Byte	 0000001E _DATA	
x_tail . . . . . . . . . . . . .	Byte	 00000026 _DATA	
y_food . . . . . . . . . . . . .	Byte	 00000023 _DATA	
y_head . . . . . . . . . . . . .	Byte	 0000001F _DATA	
y_tail . . . . . . . . . . . . .	Byte	 00000027 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
