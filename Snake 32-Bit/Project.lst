Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/11/16 20:25:33
Snake   (Snake.asm					     Page 1 - 1


				TITLE   Snake   (Snake.asm)
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Last update: 12/8/16

				; Alex Blair
				; Mckenna Galle
				; Julia Abbott
				; Eben Schumann

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				; This program: 
				;Simulates the game of Snake. 
				;The snake will move via user input as well as it shall eat and grow according to food eaten.
				; Then the game will end if the snake collides with a wall, or if the snake collides with itself.
				;Also the next level will start if the snake finishes all of its food. 
				;Lastly the user may end the game by pressing the escape key.
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				; 218 is the character I want for the snake 


 00000000			.data

				;;;;;;;;;;;;;;;;;;;;;;;
				; These are strings to be printed to the console

 00000000 20 57 65 6C 63	WelcMsg BYTE " Welcome to Snake! ", 0
	   6F 6D 65 20 74
	   6F 20 53 6E 61
	   6B 65 21 20 00
 00000014 20 47 61 6D 65	GameoverST BYTE " Game Over! ",0
	   20 4F 76 65 72
	   21 20 00
 00000021 20 59 6F 75 72	ScoreDispST BYTE " Your Score Is: ",0
	   20 53 63 6F 72
	   65 20 49 73 3A
	   20 00
 00000032 20 47 61 6D 65	SpeedDisp BYTE " Game Speed is: ",0
	   20 53 70 65 65
	   64 20 69 73 3A
	   20 00

				;;;;;;;;;;;;;;;;;;;;;;; These are the Snake elements
 00000043 00			x_head BYTE ?         ; X coordinate of the head of the snake
 00000044 00			y_head BYTE ?         ; Y coordinate of the head of the snake
 00000045 02			head BYTE 2H          ; Character for the head of the snake
 00000046 23			part BYTE "#"      ; Character for snake segments

 00000047 00			x_food BYTE ?         ; X coordinate for the food
 00000048 00			y_food BYTE ?         ; Y coordinate for the food
 00000049 00			foodeaten BYTE 0      ; Amount of food eaten
 0000004A 61			Food BYTE "a"         ; Character for the food

 0000004B 00			x_tail BYTE ?         ; Holds the x coordinate for the tail of the snake
 0000004C 00			y_tail BYTE ?         ; Holds the y coordinate for the tail of the snake

 0000004D			Segments_X BYTE 800 DUP(0)  ; Array for the X coordinate of the segments
 0000036D			Segments_Y BYTE 800 DUP(0)  ; Array for the Y coordinate of the segments

 0000068D 00000000		NumOfSegments DWORD 0

 00000691 00000000		score DWORD 0
 00000695 005A			speed WORD 90         ; Holds the speed of the game

 00000697 00			direction BYTE 0      ; Holds Direction
 00000698 00			oldDirect BYTE 0      ; Holds the old direction

 00000699 20 26 26 26 26	Sides1 BYTE " &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& " , 0
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 26 26 20
	   00
 000006C2 20 26 20 00		Sides2 BYTE " & " , 0



 00000000			.code
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000000			main PROC
 00000000  E8 00000000 E	call Clrscr
 00000005  B2 0E		mov dl, 14
 00000007  B6 02		mov dh, 2
 00000009  E8 00000000 E	call Gotoxy
 0000000E  BA 00000000 R	mov edx, OFFSET WelcMsg
 00000013  E8 00000000 E	call WriteString


 00000018  B2 00		mov dl, 0
 0000001A  B6 08		mov dh, 8
 0000001C  E8 00000000 E	call Gotoxy
 00000021  BA 00000032 R	mov edx, OFFSET SpeedDisp
 00000026  E8 00000000 E	call WriteString

 0000002B  B2 0E		mov dl, 14
 0000002D  B6 04		mov dh, 4
 0000002F  E8 00000000 E	call Gotoxy
 00000034  BA 00000699 R	mov edx, OFFSET Sides1
 00000039  E8 00000000 E	call WriteString
 0000003E  B4 14		mov ah, 20

 00000040			Sides:
 00000040  B2 0E		mov dl, 14
 00000042  8A F4		mov dh, ah
 00000044  E8 00000000 E	call Gotoxy
 00000049  FE CC		dec ah
 0000004B  BA 000006C2 R	mov edx, OFFSET Sides2
 00000050  E8 00000000 E	call WriteString
 00000055  80 FC 04		cmp ah, 4
 00000058  7F E6		jg Sides
 0000005A  B2 0E		mov dl, 14
 0000005C  B6 15		mov dh, 21
 0000005E  E8 00000000 E	call Gotoxy
 00000063  BA 00000699 R	mov edx, OFFSET Sides1
 00000068  E8 00000000 E	call WriteString

 0000006D			RandomX:
 0000006D  E8 00000000 E	Call Randomize
 00000072  B8 00000040		mov eax, 64
 00000077  E8 00000000 E	call RandomRange
 0000007C  3C 0F		cmp al, 15
 0000007E  7C ED		jl RandomX
 00000080  A2 00000043 R	mov x_head, al
 00000085  BE 0000004D R	mov  esi, OFFSET Segments_X
 0000008A  88 06		mov [esi], al
 0000008C  8A D0		mov dl, al

 0000008E			RandomY:
 0000008E  B8 00000013		mov eax, 19
 00000093  E8 00000000 E	call RandomRange
 00000098  3C 05		cmp al, 5
 0000009A  7C F2		jl RandomY
 0000009C  A2 00000044 R	mov y_head, al
 000000A1  BE 0000036D R	mov esi, OFFSET Segments_Y
 000000A6  88 06		mov [esi], al
 000000A8  8A F0		mov dh, al
 000000AA  E8 00000000 E	call Gotoxy
 000000AF  A0 00000045 R	mov al, head
 000000B4  E8 00000000 E	call WriteChar

 000000B9			Start:
 000000B9  E8 0000041B		call Collide
 000000BE  E8 00000000 E	call ReadKey
 000000C3  74 20		jz SameDirect
 000000C5  80 FC 51		cmp ah, 51H
 000000C8  7F EF		jg Start
 000000CA  80 FC 47		cmp ah, 47H
 000000CD  7C EA		jl Start
 000000CF  80 FC 4C		cmp ah, 4CH
 000000D2  74 E5		je Start
 000000D4  E8 00000029		call SnakeMovement
 000000D9  E8 000002E7		call SetGame
 000000DE  E8 00000346		call PrintSegments
 000000E3  EB D4		jmp Start

 000000E5			SameDirect:
 000000E5  8A 25 00000697 R	mov ah, direction
 000000EB  66| 83 F8 01		cmp ax, 0001H
 000000EF  74 C8		je Start
 000000F1  E8 0000000C		call SnakeMovement
 000000F6  E8 000002CA		call SetGame
 000000FB  E8 00000329		call PrintSegments
 00000100  EB B7		jmp Start
 00000102			main ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000102			SnakeMovement PROC USES eax edx
				; This procedure will take user input and interpret it 
				; Into snake movement

 00000102  50		   *	    push   eax
 00000103  52		   *	    push   edx
 00000104  88 25 00000697 R	mov direction, ah
 0000010A  E8 0000038D		call GameSpeed
 0000010F  66| A1		mov ax, speed
	   00000695 R
 00000115  0F B7 C0		movzx eax, ax           ; This delays motion
 00000118  E8 00000000 E	call Delay
 0000011D  B2 00		mov dl, 0
 0000011F  B6 09		mov dh, 9
 00000121  E8 00000000 E	call Gotoxy
 00000126  66| A1		mov ax, speed
	   00000695 R
 0000012C  0F B7 C0		movzx eax, ax
 0000012F  E8 00000000 E	call WriteInt          ; This is the speed of the game

 00000134  8A 15 00000043 R	mov dl, x_head
 0000013A  8A 35 00000044 R	mov dh, y_head
 00000140  E8 00000000 E	call Gotoxy

 00000145  B0 20		mov al, ' '
 00000147  E8 00000000 E	call WriteChar
 0000014C  E8 0000014A		call FoodEat
 00000151  8A 25 00000697 R	mov ah, direction     ; This passes the new direction to ah
 00000157  A0 00000698 R	mov al, oldDirect     ; This passes the old direction to al

 0000015C  80 FA 40		cmp dl, 64
 0000015F  0F 8D 000000E4	jge GameOver

 00000165  80 FA 0E		cmp dl, 14
 00000168  0F 8E 000000DB	jle GameOver

 0000016E  80 FE 15		cmp dh, 21
 00000171  0F 8D 000000D2	jge GameOver

 00000177  80 FE 04		cmp dh, 4
 0000017A  0F 8E 000000C9	jle GameOver

 00000180  80 FC 48		cmp ah, 48H
 00000183  74 28		je Up

 00000185  80 FC 50		cmp ah, 50H
 00000188  74 32je Down

 0000018A  80 FC 4D		cmp ah, 4DH
 0000018D  74 3C		je Right

 0000018F  80 FC 4B		cmp ah, 4BH
 00000192  74 46		je Left

 00000194  80 FC 49		cmp ah, 49H
 00000197  74 50		je UpRight

 00000199  80 FC 47		cmp ah, 47H
 0000019C  74 5C		je UpLeft

 0000019E  80 FC 51		cmp ah, 51H
 000001A1  74 68		je DownRight

 000001A3  80 FC 4F		cmp ah, 4FH
 000001A6  74 74		je DownLeft

 000001A8  E9 00000099		jmp Finish


 000001AD			Up:
 000001AD  C6 05 00000698 R	mov oldDirect, 48H
	   48
 000001B4  3C 50		cmp al, 50H
 000001B6  74 04		je Down
 000001B8  FE CE		dec dh
 000001BA  EB 6F		jmp UpdateHead

 000001BC			Down:
 000001BC  C6 05 00000698 R	mov oldDirect, 50H
	   50
 000001C3  3C 48		cmp al, 48H
 000001C5  74 E6		je Up
 000001C7  FE C6		inc dh
 000001C9  EB 60		jmp UpdateHead

 000001CB			Right:
 000001CB  C6 05 00000698 R	mov oldDirect, 4DH
	   4D
 000001D2  3C 4B		cmp al, 4BH
 000001D4  74 04		je Left
 000001D6  FE C2		inc dl
 000001D8  EB 51		jmp UpdateHead

 000001DA			Left:
 000001DA  C6 05 00000698 R	mov oldDirect, 4BH
	   4B
 000001E1  3C 4D		cmp al, 4DH
 000001E3  74 E6		je Right
 000001E5  FE CA		dec dl
 000001E7  EB 42		jmp UpdateHead

 000001E9			UpRight:
 000001E9  C6 05 00000698 R	mov oldDirect, 49H
	   49
 000001F0  3C 04		cmp al, 4H
 000001F2  74 28		je DownLeft
 000001F4  FE CE		dec dh
 000001F6  FE C2		inc dl
 000001F8  EB 31		jmp UpdateHead

 000001FA			UpLeft:
 000001FA  C6 05 00000698 R	mov oldDirect, 47H
	   47
 00000201  3C 51		cmp al, 51H
 00000203  74 06		je DownRight
 00000205  FE CE		dec dh
 00000207  FE CA		dec dl
 00000209  EB 20		jmp UpdateHead

 0000020B			DownRight:
 0000020B  C6 05 00000698 R	mov oldDirect, 51H
	   51
 00000212  3C 47		cmp al, 47H
 00000214  74 E4		je UpLeft
 00000216  FE C6		inc dh
 00000218  FE C2		inc dl
 0000021A  EB 0F		jmp UpdateHead

 0000021C			DownLeft:
 0000021C  C6 05 00000698 R	mov oldDirect, 4FH
	   4F
 00000223  3C 49		cmp al, 49H
 00000225  74 C2		je UpRight
 00000227  FE C6		inc dh
 00000229  FE CA		dec dl

 0000022B			UpdateHead:
 0000022B  88 15 00000043 R	mov x_head, dl
 00000231  88 35 00000044 R	mov y_head, dh
 00000237  E8 00000000 E	call Gotoxy
 0000023C  A0 00000045 R	mov al, head
 00000241  E8 00000000 E	call WriteChar

 00000246			Finish:

				ret
 00000246  5A		   *	    pop    edx
 00000247  58		   *	    pop    eax
 00000248  C3		   *	    ret    00000h

 00000249			GameOver:
 00000249  8A 15 00000043 R	mov dl, x_head
 0000024F  8A 35 00000044 R	mov dh, y_head
 00000255  E8 00000000 E	call Gotoxy
 0000025A  A0 00000045 R	mov al, head
 0000025F  E8 00000000 E	call WriteChar
 00000264  B8 000003E8		mov eax, 1000
 00000269  E8 00000000 E	call Delay
 0000026E  B2 21		mov dl, 33
 00000270  B6 0D		mov dh, 13
 00000272  E8 00000000 E	call Gotoxy
 00000277  B8 000000F4		mov eax, red+(white*16)
 0000027C  E8 00000000 E	call SetTextColor
 00000281  BA 00000014 R	mov edx, OFFSET GameoverST
 00000286  E8 00000000 E	call WriteString
 0000028B  B2 14		mov dl, 20
 0000028D  B6 18		mov dh, 24
 0000028F  E8 00000000 E	call Gotoxy
				exit
 00000294  6A 00	   *	    push   +000000000h
 00000296  E8 00000000 E   *	    call   ExitProcess
 0000029B			SnakeMovement ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000029B			FoodEat PROC USES eax edx
				; This procedure will randomize and display the food for the snake

 0000029B  50		   *	    push   eax
 0000029C  52		   *	    push   edx
 0000029D			NewFood:
 0000029D  A0 00000049 R	mov al, foodeaten
 000002A2  3C 00		cmp al, 0
 000002A4  75 42		jne NotEaten

 000002A6			RandomX:
 000002A6  C6 05 00000049 R	mov foodeaten, 1
	   01
 000002AD  B8 00000040		mov eax, 64
 000002B2  E8 00000000 E	call RandomRange
 000002B7  3C 0F		cmp al, 15
 000002B9  7C EB		jl RandomX
 000002BB  A2 00000047 R	mov x_food, al
 000002C0  8A D0		mov dl, al

 000002C2			RandomY:
 000002C2  B8 00000012		mov eax, 18
 000002C7  E8 00000000 E	call RandomRange
 000002CC  3C 05		cmp al, 5
 000002CE  7C F2		jl RandomY
 000002D0  A2 00000048 R	mov y_food, al
 000002D5  8A F0		mov dh, al
 000002D7  E8 00000000 E	call Gotoxy
 000002DC  A0 0000004A R	mov al, food
 000002E1  E8 00000000 E	call WriteChar
 000002E6  8A C2		mov al, dl

 000002E8			NotEaten:
 000002E8  A0 00000043 R	mov al, x_head
 000002ED  8A 25 00000044 R	mov ah, y_head
 000002F3  8A 15 00000047 R	mov dl, x_food
 000002F9  8A 35 00000048 R	mov dh, y_food
 000002FF  66| 3B C2		cmp ax, dx
 00000302  75 3B		jne Finish
 00000304  A1 0000068D R	mov eax, NumOfSegments
 00000309  40			inc eax
 0000030A  A3 0000068D R	mov NumOfSegments, eax
 0000030F  C6 05 00000049 R	mov foodeaten, 0
	   00
 00000316  E8 0000010E		call PrintSegments
 0000031B  E8 0000016E		call ScoreDisp
 00000320  B2 1E		mov dl, 30
 00000322  B6 17		mov dh, 23
 00000324  E8 00000000 E	call Gotoxy
 00000329  BA 00000021 R	mov edx, OFFSET ScoreDispST
 0000032E  E8 00000000 E	call WriteString
 00000333  A1 00000691 R	mov eax, score
 00000338  E8 00000000 E	call WriteInt
 0000033D  EB 00		jmp Finish
 0000033F			Finish:

				ret
 0000033F  5A		   *	    pop    edx
 00000340  58		   *	    pop    eax
 00000341  C3		   *	    ret    00000h
 00000342			FoodEat ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000342			Snake PROC USES eax ebx ecx esi
				; This procedure will genereate a Snake 
 00000342  50		   *	    push   eax
 00000343  53		   *	    push   ebx
 00000344  51		   *	    push   ecx
 00000345  56		   *	    push   esi
 00000346  8B 1D 0000068D R	mov ebx, NumOfSegments
 0000034C  83 FB 01		cmp ebx, 1
 0000034F  7D 1E		jge Continue
 00000351  BE 0000004D R	mov esi, OFFSET Segments_X
 00000356  A0 00000043 R	mov al, x_head
 0000035B  88 06		mov [esi], al
 0000035D  8A 06		mov al, [esi]
 0000035F  BE 0000036D R	mov esi, OFFSET Segments_Y
 00000364  A0 00000044 R	mov al, y_head
 00000369  88 06		mov [esi], al
 0000036B  8A 06		mov al,[esi]
 0000036D  EB 51		jmp Finish

 0000036F			Continue:
 0000036F  A0 00000049 R	mov al, foodeaten
 00000374  0F B6 C0		movzx eax, al
 00000377  3C 00		cmp al, 0
 00000379  75 3B		jne NotEaten

 0000037B			Eaten:
 0000037B  8B 0D 0000068D R	mov ecx, NumOfSegments
 00000381  41			inc ecx

 00000382			ShiftRight:
 00000382  8B D9		mov ebx, ecx
 00000384  BE 0000004D R	mov esi, OFFSET Segments_X
 00000389  8A 44 33 FF		mov al, [esi+ebx-1]
 0000038D  88 04 33		mov [esi+ebx], al
 00000390  BE 0000036D R	mov esi, OFFSET Segments_Y
 00000395  8A 44 33 FF		mov al, [esi+ebx-1]
 00000399  88 04 33		mov [esi+ebx], al

 0000039C  E2 E4		Loop ShiftRight

 0000039E  BE 0000004D R	mov esi, OFFSET Segments_X
 000003A3  A0 00000047 R	mov al, x_food
 000003A8  88 06		mov [esi], al
 000003AA  BE 0000036D R	mov esi, OFFSET Segments_Y
 000003AF  A0 00000048 R	mov al, y_food
 000003B4  88 06		mov [esi], al

 000003B6			NotEaten:

 000003B6  E8 0000000A		call SetGame
 000003BB  E8 00000069		call PrintSegments

 000003C0			Finish:

				ret
 000003C0  5E		   *	    pop    esi
 000003C1  59		   *	    pop    ecx
 000003C2  5B		   *	    pop    ebx
 000003C3  58		   *	    pop    eax
 000003C4  C3		   *	    ret    00000h
 000003C5			Snake ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000003C5			SetGame PROC

 000003C5  BE 0000004D R	mov esi, OFFSET Segments_X
 000003CA  8A 06		mov al, [esi]
 000003CC  A2 0000004B R	mov x_tail, al
 000003D1  BE 0000036D R	mov esi, OFFSET Segments_Y
 000003D6  8A 06		mov al, [esi]
 000003D8  A2 0000004C R	mov y_tail, al
 000003DD  BB 00000001		mov ebx, 1
 000003E2  8B 0D 0000068D R	mov ecx, NumOfSegments
 000003E8  41			inc ecx

 000003E9			ShiftLeft:
 000003E9  BE 0000004D R	mov esi, OFFSET Segments_X
 000003EE  8A 04 33		mov al, [esi+ebx]
 000003F1  88 44 33 FF		mov [esi+ebx-1],al
 000003F5  BE 0000036D R	mov esi, OFFSET Segments_Y
 000003FA  8A 04 33		mov al, [esi+ebx]
 000003FD  88 44 33 FF		mov [esi+ebx-1], al
 00000401  8A 06		mov al, [esi]
 00000403  43			inc ebx

 00000404  E2 E3		Loop ShiftLeft

 00000406  8B 1D 0000068D R	mov ebx, NumOfSegments
 0000040C  BE 0000004D R	mov esi, OFFSET Segments_X
 00000411  A0 00000043 R	mov al, x_head
 00000416  88 04 33		mov[esi+ebx], al
 00000419  8A 06		mov al, [esi]
 0000041B  BE 0000036D R	mov esi, OFFSET Segments_Y
 00000420  A0 00000044 R	mov al, y_head
 00000425  88 04 33		mov [esi+ebx], al

 00000428  C3			ret
 00000429			SetGame ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000429			PrintSegments PROC USES eax ebx ecx edx esi

 00000429  50		   *	    push   eax
 0000042A  53		   *	    push   ebx
 0000042B  51		   *	    push   ecx
 0000042C  52		   *	    push   edx
 0000042D  56		   *	    push   esi
 0000042E  8A 15 0000004B R	mov dl, x_tail
 00000434  8A 35 0000004C R	mov dh, y_tail

 0000043A  E8 00000000 E	call Gotoxy

 0000043F  B0 20		mov al, ' '

 00000441  E8 00000000 E	call WriteChar
 00000446  8B 0D 0000068D R	mov ecx, NumOfSegments
 0000044C  41			inc ecx

 0000044D			Print:
 0000044D  8B D9		mov ebx, ecx
 0000044F  BE 0000004D R	mov esi, OFFSET Segments_X
 00000454  8A 44 33 FF		mov al, [esi+ebx-1]
 00000458  8A D0		mov dl, al
 0000045A  BE 0000036D R	mov esi, OFFSET Segments_Y
 0000045F  8A 44 33 FF		mov al, [esi+ebx-1]
 00000463  8A F0		mov dh, al
 00000465  E8 00000000 E	call Gotoxy
 0000046A  8B 15 0000068D R	mov edx, NumOfSegments
 00000470  42			inc edx
 00000471  3B CA		cmp ecx, edx
 00000473  75 07		jne PrintSeg
 00000475  A0 00000045 R	mov al, head
 0000047A  EB 05		jmp Printtail

 0000047C			PrintSeg:
 0000047C  A0 00000046 R	mov al, part

 00000481			Printtail:
 00000481  E8 00000000 E	call WriteChar

 00000486  E2 C5		Loop Print

				ret
 00000488  5E		   *	    pop    esi
 00000489  5A		   *	    pop    edx
 0000048A  59		   *	    pop    ecx
 0000048B  5B		   *	    pop    ebx
 0000048C  58		   *	    pop    eax
 0000048D  C3		   *	    ret    00000h
 0000048E			PrintSegments ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000048E			ScoreDisp PROC
				; This procedure will display the user's score

 0000048E  A1 00000691 R	mov eax, score
 00000493  83 C0 01		add eax, 1
 00000496  A3 00000691 R	mov score, eax

 0000049B  C3			ret
 0000049C			ScoreDisp ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000049C			GameSpeed PROC USES eax ebx edx

 0000049C  50		   *	    push   eax
 0000049D  53		   *	    push   ebx
 0000049E  52		   *	    push   edx
 0000049F  BA 00000000		mov edx, 0
 000004A4  A1 00000691 R	mov eax, score
 000004A9  BB 0000000A		mov ebx, 10
 000004AE  F7 F3		div ebx
 000004B0  83 FA 01		cmp edx, 1
 000004B3  75 20		jne Finish
 000004B5  66| A1		mov ax, speed
	   00000695 R
 000004BB  66| BB 000A		mov bx, 10
 000004BF  66| 2B C3		sub ax, bx
 000004C2  66| A3		mov speed, ax
	   00000695 R
 000004C8  A1 00000691 R	mov eax, score
 000004CD  83 C0 01		add eax, 1
 000004D0  A3 00000691 R	mov score, eax

 000004D5			Finish:

				ret
 000004D5  5A		   *	    pop    edx
 000004D6  5B		   *	    pop    ebx
 000004D7  58		   *	    pop    eax
 000004D8  C3		   *	    ret    00000h
 000004D9			GameSpeed ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000004D9			Collide PROC USES eax ebx ecx edx esi
 000004D9  50		   *	    push   eax
 000004DA  53		   *	    push   ebx
 000004DB  51		   *	    push   ecx
 000004DC  52		   *	    push   edx
 000004DD  56		   *	    push   esi
 000004DE  8B 0D 0000068D R		mov ecx, NumOfSegments		
 000004E4  83 F9 03			cmp ecx, 3
 000004E7  7E 36			jle EndOfGame		
 000004E9  41				inc ecx
 000004EA			Collision:					
 000004EA  8B D9			mov ebx, ecx	
 000004EC  BE 0000004D R		mov esi, OFFSET Segments_X		
 000004F1  8A 44 33 FE			mov al, [esi+ebx-2]
 000004F5  8A D0			mov dl, al
 000004F7  BE 0000036D R		mov esi, OFFSET Segments_Y		
 000004FC  8A 44 33 FE			mov al, [esi+ebx-2]
 00000500  8A F0			mov dh, al			
 00000502  A0 00000043 R		mov al, x_head
 00000507  8A 25 00000044 R		mov ah, y_head			
 0000050D  66| 3B D0			cmp dx, ax
 00000510  74 02			je Lengthh			
 00000512  EB 53			jmp Endd
 00000514			Lengthh:				
 00000514  8B 15 0000068D R		mov edx, NumOfSegments
 0000051A  42				inc edx				
 0000051B  3B CA			cmp ecx, edx
 0000051D  74 48			je Endd
 0000051F			EndOfGame:
 0000051F  8A 15 00000043 R		mov dl, x_head			
 00000525  8A 35 00000044 R		mov dh, y_head
 0000052B  E8 00000000 E		call Gotoxy			
 00000530  A0 00000045 R		mov al, head
 00000535  E8 00000000 E		call WriteChar
 0000053A  B2 21			mov dl, 33
 0000053C  B6 0D			mov dh, 13			
 0000053E  E8 00000000 E		call Gotoxy
 00000543  BA 00000014 R		mov edx, OFFSET GameOverST
 00000548  E8 00000000 E		call WriteString
 0000054D  B2 14			mov dl, 20			
 0000054F  B6 18			mov dh, 24
 00000551  E8 00000000 E		call Gotoxy			
 00000556  B8 000005DC			mov eax, 1500
 0000055B  E8 00000000 E		call Delay
					exit
 00000560  6A 00	   *	    push   +000000000h
 00000562  E8 00000000 E   *	    call   ExitProcess
 00000567			Endd:
 00000567  E2 81			Loop Collision

				   ret
 00000569  5E		   *	    pop    esi
 0000056A  5A		   *	    pop    edx
 0000056B  59		   *	    pop    ecx
 0000056C  5B		   *	    pop    ebx
 0000056D  58		   *	    pop    eax
 0000056E  C3		   *	    ret    00000h
 0000056F			   Collide ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				exit
 0000056F  6A 00	   *	    push   +000000000h
 00000571  E8 00000000 E   *	    call   ExitProcess
				END main
Microsoft (R) Macro Assembler Version 14.00.23026.0	    12/11/16 20:25:33
Snake   (Snake.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000006C6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000576 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Collide  . . . . . . . . . . . .	P Near	 000004D9 _TEXT	Length= 00000096 Public STDCALL
  Collision  . . . . . . . . . .	L Near	 000004EA _TEXT	
  Lengthh  . . . . . . . . . . .	L Near	 00000514 _TEXT	
  EndOfGame  . . . . . . . . . .	L Near	 0000051F _TEXT	
  Endd . . . . . . . . . . . . .	L Near	 00000567 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FoodEat  . . . . . . . . . . . .	P Near	 0000029B _TEXT	Length= 000000A7 Public STDCALL
  NewFood  . . . . . . . . . . .	L Near	 0000029D _TEXT	
  RandomX  . . . . . . . . . . .	L Near	 000002A6 _TEXT	
  RandomY  . . . . . . . . . . .	L Near	 000002C2 _TEXT	
  NotEaten . . . . . . . . . . .	L Near	 000002E8 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 0000033F _TEXT	
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameSpeed  . . . . . . . . . . .	P Near	 0000049C _TEXT	Length= 0000003D Public STDCALL
  Finish . . . . . . . . . . . .	L Near	 000004D5 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintSegments  . . . . . . . . .	P Near	 00000429 _TEXT	Length= 00000065 Public STDCALL
  Print  . . . . . . . . . . . .	L Near	 0000044D _TEXT	
  PrintSeg . . . . . . . . . . .	L Near	 0000047C _TEXT	
  Printtail  . . . . . . . . . .	L Near	 00000481 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScoreDisp  . . . . . . . . . . .	P Near	 0000048E _TEXT	Length= 0000000E Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetGame  . . . . . . . . . . . .	P Near	 000003C5 _TEXT	Length= 00000064 Public STDCALL
  ShiftLeft  . . . . . . . . . .	L Near	 000003E9 _TEXT	
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SnakeMovement  . . . . . . . . .	P Near	 00000102 _TEXT	Length= 00000199 Public STDCALL
  Up . . . . . . . . . . . . . .	L Near	 000001AD _TEXT	
  Down . . . . . . . . . . . . .	L Near	 000001BC _TEXT	
  Right  . . . . . . . . . . . .	L Near	 000001CB _TEXT	
  Left . . . . . . . . . . . . .	L Near	 000001DA _TEXT	
  UpRight  . . . . . . . . . . .	L Near	 000001E9 _TEXT	
  UpLeft . . . . . . . . . . . .	L Near	 000001FA _TEXT	
  DownRight  . . . . . . . . . .	L Near	 0000020B _TEXT	
  DownLeft . . . . . . . . . . .	L Near	 0000021C _TEXT	
  UpdateHead . . . . . . . . . .	L Near	 0000022B _TEXT	
  Finish . . . . . . . . . . . .	L Near	 00000246 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 00000249 _TEXT	
Snake  . . . . . . . . . . . . .	P Near	 00000342 _TEXT	Length= 00000083 Public STDCALL
  Continue . . . . . . . . . . .	L Near	 0000036F _TEXT	
  Eaten  . . . . . . . . . . . .	L Near	 0000037B _TEXT	
  ShiftRight . . . . . . . . . .	L Near	 00000382 _TEXT	
  NotEaten . . . . . . . . . . .	L Near	 000003B6 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000003C0 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000102 Public STDCALL
  Sides  . . . . . . . . . . . .	L Near	 00000040 _TEXT	
  RandomX  . . . . . . . . . . .	L Near	 0000006D _TEXT	
  RandomY  . . . . . . . . . . .	L Near	 0000008E _TEXT	
  Start  . . . . . . . . . . . .	L Near	 000000B9 _TEXT	
  SameDirect . . . . . . . . . .	L Near	 000000E5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
Food . . . . . . . . . . . . . .	Byte	 0000004A _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameoverST . . . . . . . . . . .	Byte	 00000014 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumOfSegments  . . . . . . . . .	DWord	 0000068D _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScoreDispST  . . . . . . . . . .	Byte	 00000021 _DATA	
Segments_X . . . . . . . . . . .	Byte	 0000004D _DATA	
Segments_Y . . . . . . . . . . .	Byte	 0000036D _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Sides1 . . . . . . . . . . . . .	Byte	 00000699 _DATA	
Sides2 . . . . . . . . . . . . .	Byte	 000006C2 _DATA	
SpeedDisp  . . . . . . . . . . .	Byte	 00000032 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WelcMsg  . . . . . . . . . . . .	Byte	 00000000 _DATA	
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000697 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foodeaten  . . . . . . . . . . .	Byte	 00000049 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
head . . . . . . . . . . . . . .	Byte	 00000045 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
oldDirect  . . . . . . . . . . .	Byte	 00000698 _DATA	
part . . . . . . . . . . . . . .	Byte	 00000046 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 00000691 _DATA	
speed  . . . . . . . . . . . . .	Word	 00000695 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x_food . . . . . . . . . . . . .	Byte	 00000047 _DATA	
x_head . . . . . . . . . . . . .	Byte	 00000043 _DATA	
x_tail . . . . . . . . . . . . .	Byte	 0000004B _DATA	
y_food . . . . . . . . . . . . .	Byte	 00000048 _DATA	
y_head . . . . . . . . . . . . .	Byte	 00000044 _DATA	
y_tail . . . . . . . . . . . . .	Byte	 0000004C _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
